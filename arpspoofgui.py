# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'arpspoofingwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import setuptools.msvc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import Qt
from PyQt5.QtGui import QCursor, QStandardItemModel
from PyQt5.QtCore import QThread, Qt, pyqtSignal, QTimer
from PyQt5.QtWidgets import QWidget, QComboBox, QHBoxLayout, QApplication
from GUI import run
import threading
import time
from stylesheet import *
import os
import linecache
import sys
from PyQt5.QtWidgets import (
    QApplication,
    QLabel,
    QMainWindow,
    QPushButton,
    QVBoxLayout,
    QWidget,
)


gatewayIP = ""
victimIP = ""
RUN = False
ATTACK = False
RESTORED = False
lineData = ""
arpItPath = "C:\\Users\\User\Documents\To The Distance\GUI\\txtFiles\\arpItLater.txt"


# need to add alert to the user to wait until the stop func will executed
# need to clear the arpfile.txt everytime the user start the attack and not when he close the window


with open("../txtFiles/arpfile.txt", "w") as t:
    t.write("\n")
t.close()


class PrintDetails(QThread):
    def __init__(self, parent=None):
        super(PrintDetails, self).__init__(parent)

    def run(self):
        global lineData
        while True:
            with open("../txtFiles/arpfile.txt", "r") as spooffile:
                lineData = spooffile.read()
                time.sleep(1)

class StartAttack(QThread):
    def __init__(self, parent=None):
        super(StartAttack, self).__init__(parent)

    def run(self):
        print("Starts ARP Spoof Attack.\nGW: {}\nVictim: {}\n".format(gatewayIP, victimIP))
        run.ARP_SPOOF_START(gatewayIP, victimIP, "../txtFiles/arpfile.txt")

class StopAttack(QThread):
    def __init__(self, parent=None):
        super(StopAttack, self).__init__(parent)

    def run(self):
        print("Stopped ARP Spoof")
        run.ARP_SPOOF_STOP(gatewayIP, victimIP)


class ARPSpoofingWindow(QWidget):

    def closeEvent(self, event):
        self.StartsAttack.terminate()
        self.details.terminate()

    def update_text(self):
        global ATTACK
        global RESTORED
        if ATTACK:
            self.plainTextEdit.appendHtml("<span style=\"color:#ff0000;font-size:10pt;\" > {} </span>".format(lineData.strip()))
        if RESTORED:
            self.plainTextEdit.setPlaceholderText("")
            RESTORED = False

    def getSpoofIPs(self):
        global gatewayIP
        global victimIP
        global ATTACK
        ATTACK = True
        self.gatewayIPValue = self.lineEdit.text()
        self.victimIPValue = self.lineEdit_2.text()
        gatewayIP = self.gatewayIPValue
        victimIP = self.victimIPValue
        self.pushButton.setEnabled(False)
        self.StopButtn.setEnabled(True)
        self.StartsAttack.start()
        print("And now print ... ")
        self.details.start()

    def StopAttack(self):
        global ATTACK
        global RESTORED
        if not RESTORED:
            self.plainTextEdit.setPlaceholderText("Restoring Tables ... ")
            RESTORED = True

        ATTACK = False
        print("ARP Spoof Attack stopped!")
        self.plainTextEdit.clear()
        self.pushButton.setEnabled(True)
        self.StopButtn.setEnabled(False)
        self.StartsAttack.terminate()
        self.details.terminate()
        self.StopsAttack.start()

    def getSpoofIP_From_Dict(self):
        currentIPNumber = self.comboIPTarget.currentText()
        ActualIP = self.ipToSpoof.get(currentIPNumber)
        self.lineEdit_2.setText(ActualIP)

    def getGatewayIP_From_Dict(self):
        currentIPNumber = self.comboIPGateway.currentText()
        ActualIP = self.ipToSpoof.get(currentIPNumber)
        self.lineEdit.setText(ActualIP)

    def __init__(self):
        super().__init__()
        self.setObjectName("ARPSpoofingWindow")
        self.resize(450, 550)
        self.setWindowIcon(QtGui.QIcon("C:\\Users\\User\\Documents\To The Distance\GUI\distanceOnly.png"))

        self.ipToSpoof = {"IP": run.GET_NETWORK_IP()}
        self.gatewayIPs = ['', 'IP']

        self.StartsAttack = StartAttack()
        self.StopsAttack = StopAttack()
        self.details = PrintDetails()

        self.centralwidget = QVBoxLayout()
        self.centralwidget.setObjectName("centralwidget")

        self.gatewayTargetBox = QHBoxLayout()
        self.IPTargetBox = QHBoxLayout()
        self.ButtonsLayout = QHBoxLayout()

        self.label_3 = QtWidgets.QLabel()
        self.label_3.setStyleSheet(TargetItLabel)
        self.label_3.setText("ARP Spoof")
        self.label_3.setAlignment(Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.centralwidget.addWidget(self.label_3)

        self.lineEdit = QtWidgets.QLineEdit()
        self.lineEdit.setStyleSheet(InputDesign)
        self.lineEdit.setMinimumHeight(30)
        self.lineEdit.setObjectName("lineEdit")
        self.gatewayTargetBox.addWidget(self.lineEdit)

        self.comboIPGateway = QComboBox()
        self.comboIPGateway.setView(QtWidgets.QListView())
        self.comboIPGateway.setStyleSheet(SelectButtonButNotMain)
        self.comboIPGateway.setMinimumHeight(30)
        self.comboIPGateway.addItems(self.gatewayIPs)
        self.comboIPGateway.currentIndexChanged.connect(self.getGatewayIP_From_Dict)
        self.gatewayTargetBox.addWidget(self.comboIPGateway)

        self.centralwidget.addLayout(self.gatewayTargetBox)

        self.lineEdit_2 = QtWidgets.QLineEdit()
        self.lineEdit_2.setStyleSheet(InputDesign)
        self.lineEdit_2.setMinimumHeight(30)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.IPTargetBox.addWidget(self.lineEdit_2)

        self.comboIPTarget = QComboBox()
        self.comboIPTarget.setView(QtWidgets.QListView())
        self.comboIPTarget.setStyleSheet(SelectButtonButNotMain)
        self.comboIPTarget.setMinimumHeight(30)
        self.comboIPTarget.addItems(self.gatewayIPs)
        self.comboIPTarget.currentIndexChanged.connect(self.getSpoofIP_From_Dict)
        self.IPTargetBox.addWidget(self.comboIPTarget)

        self.centralwidget.addLayout(self.IPTargetBox)

        self.comboIPGateway.removeItem(0)
        self.comboIPTarget.removeItem(0)

        self.plainTextEdit = QtWidgets.QPlainTextEdit()
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setPlaceholderText("Details")
        self.plainTextEdit.setStyleSheet(StatusStyleSheet)
        self.plainTextEdit.verticalScrollBar().setSingleStep(2)
        self.centralwidget.addWidget(self.plainTextEdit)

        self.pushButton = QtWidgets.QPushButton(clicked=lambda: self.getSpoofIPs())
        self.pushButton.setText("Start!")
        self.pushButton.setMinimumHeight(50)
        self.pushButton.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setStyleSheet(buttonStyleSheet)
        self.pushButton.setObjectName("pushButton")
        self.ButtonsLayout.addWidget(self.pushButton)

        self.StopButtn = QtWidgets.QPushButton( clicked=lambda: self.StopAttack())
        self.StopButtn.setText("Stop!")
        self.StopButtn.setMinimumHeight(50)
        self.StopButtn.setStyleSheet(DisabledButton)
        self.StopButtn.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.StopButtn.setObjectName("pushButton")
        self.StopButtn.setEnabled(False)
        self.ButtonsLayout.addWidget(self.StopButtn)

        self.centralwidget.addLayout(self.ButtonsLayout)

        timer = QTimer(self)
        timer.timeout.connect(self.update_text)
        timer.start(2000)  # every 10,000 milliseconds

        self.setLayout(self.centralwidget)
        self.setWindowTitle("ARP Spoof")

